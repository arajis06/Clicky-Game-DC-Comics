{"version":3,"sources":["components/GameHeader/GameHeader.js","components/CharacterCard/CharacterCard.js","App.js","serviceWorker.js","index.js"],"names":["GameHeader","className","CharacterCard","props","key","id","onClick","handleClick","clicked","name","alt","src","image","App","state","characters","score","topScore","message","console","log","charImg","forEach","character","index","setState","sort","Math","random","newScore","newTopScore","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2lFAaeA,G,MAVI,kBACf,yBAAKC,UAAU,+BACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,SAAd,0BACA,uBAAGA,UAAU,gBAAb,+FCaGC,G,MAjBO,SAAAC,GAAK,OACvB,yBAAKF,UAAU,+CACX,yBAAKA,UAAU,OACXG,IAAKD,EAAME,GACXC,QAAS,kBAAMH,EAAMI,YAAYJ,EAAME,GAAIF,EAAMK,WAEjD,yBAAKP,UAAU,iBACX,yBACII,GAAIF,EAAMM,KACVC,IAAKP,EAAMM,KACXE,IAAKR,EAAMS,a,OCyEhBC,G,iNA/EbC,MAAQ,CACJC,aACAC,MAAO,EACPC,SAAU,EACVC,QAAS,+B,EAGbX,YAAc,SAACF,EAAIG,GACjBW,QAAQC,IAAI,EAAKN,OAEf,IAAMO,EAAU,EAAKP,MAAMC,WAE3B,GADFI,QAAQC,IAAIZ,GACNA,EAIA,OAHAa,EAAQC,SAAQ,SAACC,EAAWC,GACxBH,EAAQG,GAAOhB,SAAU,KAEtB,EAAKiB,SAAS,CAEjBF,UAAWF,EAAQK,MAAK,kBAAMC,KAAKC,SAAW,MAC9CV,QAAS,qBACTF,MAAO,IAIXK,EAAQC,SAAQ,SAACC,EAAWC,GAC1BL,QAAQC,IAAIf,EAAIkB,EAAUlB,GAAIA,IAAOkB,EAAUlB,IACzCA,IAAOkB,EAAUlB,KACjBgB,EAAQG,GAAOhB,SAAU,EACzBW,QAAQC,IAAI,cALnB,MASuB,EAAKN,MAAxBG,EATJ,EASIA,SACDY,EAVH,EAScb,MACQ,EACnBc,EAAcD,EAAWZ,EAAWY,EAAUZ,EAElD,OAAO,EAAKQ,SAAS,CACjBF,UAAWF,EAAQK,MAAK,kBAAMC,KAAKC,SAAU,MAC7CV,QAAS,yBACTF,MAAOa,EACPZ,SAAUa,K,wEAKZ,IAAD,OACL,OACE,yBAAK7B,UAAU,kCACb,kBAAC,EAAD,MACE,yBAAKA,UAAU,kCACT,yBAAKA,UAAU,4BACX,2BAAI8B,KAAKjB,MAAMI,UAEnB,yBAAKjB,UAAU,0BACX,qCAAW8B,KAAKjB,MAAME,MAAtB,iBAA2Ce,KAAKjB,MAAMG,WAG9D,yBAAKhB,UAAU,aACX,yBAAKA,UAAU,OAEV8B,KAAKjB,MAAMC,WAAWiB,KAAI,SAAAT,GAAS,OAChC,kBAAC,EAAD,CACInB,IAAKmB,EAAUlB,GACfA,GAAIkB,EAAUlB,GACdI,KAAMc,EAAUd,KAChBD,QAASe,EAAUf,QACnBI,MAAOW,EAAUX,MACjBL,YAAa,EAAKA,yB,GApE9B0B,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df2e964c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./GameHeader.css\";\r\n\r\nconst GameHeader = () => (\r\n    <div className=\"jumbotron-fluid game-header\">\r\n        <div className=\"container text-center\">\r\n            <h1 className=\"title\">Clicky Game: DC Comics</h1>\r\n            <p className=\"instructions\">\r\n                Click on any character to earn points, but don't click on any character more than once!\r\n            </p>\r\n        </div>\r\n    </div>\r\n)\r\nexport default GameHeader;\r\n","import React from \"react\";\r\nimport \"./CharacterCard.css\";\r\n\r\nconst CharacterCard = props => (\r\n    <div className=\"col-xs-4 col-sm-6 col-md-6 col-lg-3 columns\">\r\n        <div className=\"card\" \r\n            key={props.id} \r\n            onClick={() => props.handleClick(props.id, props.clicked)} \r\n        >\r\n            <div className=\"img-container\">\r\n                <img \r\n                    id={props.name}\r\n                    alt={props.name} \r\n                    src={props.image} \r\n                />\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default CharacterCard;\r\n","import React, { Component } from 'react';\nimport GameHeader from \"./components/GameHeader\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n      characters,\n      score: 0,\n      topScore: 0,\n      message: \"Click a character to begin!\"\n  };\n\n  handleClick = (id, clicked) => {\n    console.log(this.state);\n\n      const charImg = this.state.characters;\n    console.log(clicked);\n      if (clicked) {\n          charImg.forEach((character, index) => {\n              charImg[index].clicked = false;\n          });\n          return this.setState({\n          //Math.random returns a random number between 0 and 1. So if it happens to give you a number less then 0.5 then you get a negative number and if itâ€™s over that then you get a positive.\n              character: charImg.sort(() => Math.random() - 0.5),\n              message: \"You Guessed Wrong!\",\n              score: 0\n          })\n      }\n      else {\n          charImg.forEach((character, index) => {\n            console.log(id, character.id, id === character.id);\n              if (id === character.id) {\n                  charImg[index].clicked = true;\n                  console.log(\"got it\");\n              }\n          });\n\n          var {topScore, score} = this.state;\n          var newScore = score + 1;\n          var newTopScore = newScore > topScore ? newScore: topScore;\n\n          return this.setState({\n              character: charImg.sort(() => Math.random()- 0.5),\n              message: \"You Guessed Correctly!\",\n              score: newScore,\n              topScore: newTopScore,\n          })\n      }\n  };\n\n  render() {\n      return (\n        <div className=\"container-fluid main-container\">\n          <GameHeader />\n            <div className=\"container-fluid game-container\">\n                  <div className=\"game-message text-center\">\n                      <p>{this.state.message}</p>\n                  </div>\n                  <div className=\"game-score text-center\">\n                      <p>Score: {this.state.score} | Top Score: {this.state.topScore}</p>\n                  </div>\n\n              <div className=\"container\">\n                  <div className=\"row\">\n\n                      {this.state.characters.map(character => (\n                          <CharacterCard\n                              key={character.id}\n                              id={character.id}\n                              name={character.name}\n                              clicked={character.clicked}\n                              image={character.image}\n                              handleClick={this.handleClick}\n                          />\n                      ))}\n\n                  </div>\n              </div>\n          </div>\n        </div>\n      );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}